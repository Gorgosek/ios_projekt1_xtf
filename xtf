#!/bin/bash

POSIXLY_CORRECT=yes

if [[ $# -eq 0 ]]; then
    echo "Needed arguments missing!"
    echo "Use -h, --help to display usage."
    exit 1
fi

# OPTS: -h | --help, FILTR: -a DATETIME(after), -b DATETIME(before)
# PRIKAZ: list USER 

# Functions

function print_help() {
  echo "Usage: $0 [-h |--help] [FILTR] [PRIKAZ] UZIVATEL LOG [LOG2 [...]]"
  echo ""
  echo ""
  echo "Options:"
  echo "  -h, --help      Display this help and exit"
  echo "  FILTR           Use of the -a -b -c flags to filter out the desired output"
  echo "    -a DATETIME     Filter to find rows after a timestamp DATETIME format = YYYY-MM-DD HH:MM:SS"
  echo "    -b DATETIME     Filter to find rows before a timestamp DATETIME format = YYYY-MM-DD HH:MM:SS"
  echo "    -c CURRENCY     Filter to find rows corresponding to trades using CURRENCY format = 3 letter names (ex. ETH, BTC..)"
  echo "  UZIVATEL        A continuous string value representing the username"
  echo "  LOG, LOG2, ...  Plain text files [can also be comprimed .gz] without specified suffix ('.*')"
  echo ""
}

# function check_datetime(){
# }

# Variables
args="$*"
uzivatel=""
logs=()
datetimeB=""
datetimeA=""
currency=""

# Display help and exit, ignore all the other arguments
if [[ "$args" == *"--help"* || "$args" == *"-h"* ]]; then
    print_help
    exit 0
fi


# Set variables based on arguments
while getopts ":a:b:c: " opt; do
    case "${opt}" in
        a) 
            datetimeA="$OPTARG"
            ;;
        b) 
            datetimeB="$OPTARG"
            ;;
        c) 
            currency="$OPTARG"
            ;;
        \?) 
            echo "Invalid arguments specified - $OPTARG"
            exit 1
            ;;
    esac
done

echo $datetimeA
echo $datetimeB
echo $currency

shift $((OPTIND -1))

# TODO add logic to parse prikazy when ommited default=list

for arg in "$@"; do 
    if [[ -f "$arg" ]]; then
        files+=("$arg")
    else
        if [[ -n "$uzivatel" ]]; then
            echo "Too many non-file arguments $@"
            exit 1
        else
            uzivatel="$arg"
        fi
    fi
done


echo "Uzivatel: $uzivatel"
echo "Files:"
for file in "${files[@]}"; do
  echo "$file"
done

